@page "/tramitebaja/{Id:int}"
@rendermode InteractiveServer
@inject CasoDeUsoTramiteBaja CasoBaja
@inject CasoDeUsoTramiteConsultaId CasoConsulta
@inject CasoDeUsoUsuarioConsultaId UsuarioConsulta
@inject NavigationManager Navigation
<PageTitle>SGE | Tramite</PageTitle>
<h3>Baja de Tramite</h3>
@if (!visible)
{
  <label for="inp">Id de tramite a eliminar</label>
  <input placeholder="ID a eliminar" @bind="idTram" class="mt-3 form-control" id="inp" />
  <button class="btn btn-primary mt-2" @onclick="() => Buscar(idTram)">Buscar</button>
}
else
{
  <table class="table">
    <thead>
      <tr>
        <th>Id</th>
        <th>Contenido</th>
        <th>Etiqueta</th>
        <th>Expediente asociado</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>@t.Id</td>
        <td>@t.Contenido</td>
        <td>@t.Etiqueta</td>
        <td>@t.ExpedienteId</td>
      </tr>
    </tbody>
  </table>
  <button class="btn btn-primary" @onclick="() => Eliminar(idTram)">Eliminar</button>
}
<CuadroDialogo @ref=dialogo Mensaje=@error />
<br>
<button class="btn btn-secondary mt-2" @onclick="Volver">Volver al menu</button>
<br>

@code {
  [Parameter] public int Id { get; set; }
  Tramite t = new();
  Usuario user = new();
  int idTram;
  string error = "";
  bool visible = false;

  CuadroDialogo dialogo = null!;

  protected override void OnInitialized()
  {
    try
    {
      user = UsuarioConsulta.Ejecutar(Id);
    }
    catch
    {
      Navigation.NavigateTo("/");
    }
  }

  void Buscar(int idTram)
  {
    try
    {
      t = CasoConsulta.Ejecutar(idTram);
      visible = true;
    }
    catch (Exception e)
    {
      error = e.Message;
      visible = false;
      dialogo.Mostrar();
    }

  }

  void Eliminar(int idTram)
  {
    try
    {
      CasoBaja.Ejecutar(idTram, user);
      Navigation.NavigateTo($"/tramitelistar/{user.Id}");
    }
    catch (Exception ex)
    {
      error = ex.Message;
      dialogo.Mostrar();
    }
  }

  void Volver()
  {
    Navigation.NavigateTo($"home/{Id}");
  }
}
