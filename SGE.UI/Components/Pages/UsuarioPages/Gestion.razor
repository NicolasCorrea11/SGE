@page "/gestion/1"
@rendermode InteractiveServer
@inject CasoDeUsoUsuarioListar UsuarioListar
@inject CasoDeUsoUsuarioConsultaId UsuarioConsulta
@inject CasoDeUsoUsuarioEliminar CasoBaja
@inject NavigationManager Navigation
<PageTitle>SGE | Gestion</PageTitle>

<h3>Gestion de Usuarios</h3>
<table class="table">
  <thead>
    <tr>
      <th>ID</th>
      <th>Nombre</th>
      <th>Apellido</th>
      <th>Email</th>
      <th>Acciones</th>
    </tr>
  </thead>
  <tbody>
    @foreach (Usuario u in usuarios)
    {
      <tr>
        <td>@u.Id</td>
        <td>@u.Nombre</td>
        <td>@u.Apellido</td>
        <td>@u.Email</td>
        <td>
          <button class="btn btn-primary" @onclick="() => Editar(u.Id)">Editar</button>
          @if (u.Id != 1)
          {
            <button class="btn btn-success" @onclick="() => Permisos(u.Id)">Permisos</button>
            <button class="btn btn-danger" @onclick="() => Eliminar(u.Id)">Eliminar</button>
          }
        </td>
      </tr>
    }
  </tbody>
</table>
<button class="btn btn-secondary mt-2" @onclick="Volver">Volver al menu</button>
@error

@code {
  [Parameter] public int Id { get; set; }
  List<Usuario> usuarios = [];
  string error = "";

  protected override void OnInitialized()
  {
    try
    {
      Usuario user = UsuarioConsulta.Ejecutar(Id);
    }
    catch
    {
      Navigation.NavigateTo("/");
    }
  }

  private void Editar(int id) => Navigation.NavigateTo($"usermod/{id}");
  private void Permisos(int id) => Navigation.NavigateTo($"adminperm/{id}");

  private void Eliminar(int id)
  {
    try
    {
      CasoBaja.Ejecutar(id);
      OnInitialized();
    }
    catch (Exception ex)
    {
      error = ex.Message;
    }
  }

  private void Volver()
  {
    Navigation.NavigateTo($"home/1");
  }

}