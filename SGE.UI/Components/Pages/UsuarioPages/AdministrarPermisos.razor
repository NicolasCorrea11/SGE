@page "/adminperm/{Id:int}"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject CasoDeUsoUsuarioOtorgarPermiso OtorgarPermiso
@inject CasoDeUsoUsuarioConsultaId UsuarioConsulta
@inject CasoDeUsoUsuarioQuitarPermiso QuitarPermiso
@inject UsuarioLogeado usuario
<PageTitle>SGE | Usuarios</PageTitle>

@if (usuario.user.Id == 1) 
{
<h3>Administrar permisos de @user.Nombre @user.Apellido</h3>
<table class="table">
    <thead>
        <tr>
            <th>Permiso</th>
            <th>Estado</th>
            <th>Accion</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Permiso p in permisos)
        {
            <tr>
                <td>@p</td>
                <td>@GetEstado(p)</td>
                <td>
                    @if (EstaDisponible(p))
                    {
                        <button class="btn btn-danger" @onclick="() => Quitar(user.Id, p)">Eliminar</button>
                    }
                    else
                    {
                        <button class="btn btn-success" @onclick="() => Otorgar(user.Id, p)">Agregar</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
}
else
{
    <p>Necesitar ser adminitrador para modificar permisos</p>
}
<button class="btn btn-secondary mt-2" @onclick="Volver">Volver al menu de gestion</button><br>
@error

@code {
    [Parameter] public int Id { get; set; }
    string error = "";
    Usuario user = new();
    List<Permiso> permisos = 
    [
        Permiso.ExpedienteAlta,
        Permiso.ExpedienteBaja,
        Permiso.ExpedienteModificacion,
        Permiso.TramiteAlta,
        Permiso.TramiteBaja,
        Permiso.TramiteModificacion
    ];

    protected override void OnInitialized()
    {
        try
        {
            user = UsuarioConsulta.Ejecutar(Id);
        }
        catch
        {
            Navigation.NavigateTo("/");
        }
    }

    private string GetEstado(Permiso p)
    {
        if (EstaDisponible(p))
            return "Disponible";
        return "No Disponible";
    }
    private bool EstaDisponible(Permiso p) => user.Permisos.Any(x => x == p);

    private void Quitar(int id, Permiso p)
    {
        QuitarPermiso.Ejecutar(id, p);
        OnInitialized();
    }

    private void Otorgar(int id, Permiso p)
    {
        OtorgarPermiso.Ejecutar(id, p);
        OnInitialized();
    }

    private void Volver()
    {
        Navigation.NavigateTo($"/gestion");
    }
}
